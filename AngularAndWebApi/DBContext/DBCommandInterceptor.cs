using System;
using System.Data.Common;
using System.Data.Entity.Infrastructure.Interception;
using System.Diagnostics;

namespace AngularAndWebApi.DBContext {

    /// <summary>
    /// A public class implementing the IDbCommandInterceptor interface
    /// (Currently used to intercept and log to the output the DBCommands generated by the EF)
    /// </summary>
    public class MyDBCommandInterceptor : IDbCommandInterceptor {

        #region Overrides

        public void NonQueryExecuted(DbCommand Command, DbCommandInterceptionContext<int> InterceptionContext) {
            OutputToDebug(Command.CommandText);
        }

        public void NonQueryExecuting(DbCommand Command, DbCommandInterceptionContext<int> InterceptionContext)  {
            OutputToDebug(Command.CommandText);
        }

        public void ReaderExecuted(DbCommand Command, DbCommandInterceptionContext<DbDataReader> InterceptionContext) {
            OutputToDebug(Command.CommandText);
        }

        public void ReaderExecuting(DbCommand Command, DbCommandInterceptionContext<DbDataReader> InterceptionContext){
            OutputToDebug(Command.CommandText);
        }

        public void ScalarExecuted(DbCommand Command, DbCommandInterceptionContext<object> InterceptionContext) {
            OutputToDebug(Command.CommandText);
        }

        public void ScalarExecuting(DbCommand Command, DbCommandInterceptionContext<object> InterceptionContext) {
            OutputToDebug(Command.CommandText);
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Private helper method outputing to the Debug (Console) the provided as input string
        /// </summary>
        private void OutputToDebug(string StringToOutput) {

            // Simple Nul or Empty check
            if (String.IsNullOrEmpty(StringToOutput)) {
                return;
            }

            // Logging it to the Output
            Debug.Write(StringToOutput);
        }

        #endregion

    }
}